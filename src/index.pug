doctype html 
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(http-equiv="X-UA-Compatible" content="IE=edge")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet" href="./css/main.css")
    script(src="./js/main.js") 
    title Scrollerer 
  body
    div.bar 
    main
      h1 Scrollerer

      h2 What?
      p 
        | This simple scroller is easy to use, works on ALL devices and browsers and uses your 
        | CSS and yours only. It is fast and comes in at only 3 Kb if gziped.

      h2 What's the catch?
      p 
        | Since this slider offers all the support with none of the file-size, there needs to be some
        | work on your side aswell. Scrollerer offers several options and hooks but you need to use them 
        | yourself. If you are not a web developer, this might not be the slider for you.

      h2 Why?
      p 
        | There are tons of JavaScript/TypeScript sliders out there but many suffer from the same thing: 
        | They offer tons of features nobody ever uses, they rely on their own CSS and if you want to change 
        | something, you'll likely get frustrated quickly.

      h2 HTML Setup
      p 
        | Create a simple container and place the elements you want your slider
        | to contain directly inside of it. The buttons can be placed wherever you 
        | want since they are only needed as handlers. I like to place them around 
        | the slider.
      pre
        code.language-html
          | #{'<div class="next"> > </div>'}
          | #{'<section class="slider">'}
          |   #{'<div class="slide">0</div>'}
          |   #{'<div class="slide">1</div>'}
          |   #{'<div class="slide">2</div>'}
          |   #{'...'}
          | #{'</section>'}
          | #{'<div class="prev"> < </div>'}

      h2 CSS Setup
      p 
        | Now the container just needs to be a flex-container and have 
        | no overflow on the x axis. The Slides just need a width relative 
        | to the container size and flex-shrink set to 0 so they adapt to 
        | the width correctly.

      pre
        code.language-css
          | .slider {
          |   display: flex;
          |   overflow-x: auto;
          | }
          | .slide{
          |   flex-grow: 0;
          |   margin: 0 10px;
          |   width: calc(100% / 3 - 20px);
          | }

      h2 Fire it up 
      p
        | With everything now setup, all you need to do is instanciate the
        | slider with the options you want to 

      pre
        code.language-js
          | const next = document.querySelector(".next");
          | const prev = document.querySelector(".prev");
          | const mySlider = new Scroller(".slider", {
          |   prevPageHandler: prev,
          |   nextPageHandler: next,
          | });

      h2 Options 
      p
        | This Scroller can recieve some options that can 
        | change the behaviour of the slider. If you use the 
        | TypeScript version to build your own instance you can 
        | find them documented and commented out in the top of the 
        | Scroller.ts file. If you don't care about that kind of stuff 
        | you will find the options to pass to the constructor here
        | as well.

      br

      code.inline
        span.blue desktopClass
        span ? : 
        span.green string
        span ;
      p.code-desc
        | The class added to the container of the slider but only on non touch devices

      code.inline
        span.blue nextPageHandler
        span ? : 
        span.green HTMLElement 
        span | 
        span.green undefined
        span ;
      p.code-desc
        | A HTMLElement that when clicked will progress the slider to the next slide

      code.inline
        span.blue prevPageHandler
        span ? : 
        span.green HTMLElement 
        span | 
        span.green undefined
        span ;
      p.code-desc
        | A HTMLElement that when clicked will revert the slider to the previous slide

      code.inline
        span.blue autoplay
        span ? : 
        span.green number
        span ;
      p.code-desc
        | After the given amount of milliseconds wil automatically advance to next slide.

      code.inline
        span.blue mouseScrolling
        span ? : 
        span.green boolean
        span ;
      p.code-desc
        | If set to true, will allow scrolling via mouse drag on desktop

      code.inline
        span.blue stopDragHandler
        span ? : 
        span.green Function
        span ;
      p.code-desc
        | A function that is called when manual draggign ends

      code.inline
        span.blue autoAlign
        span ? : 
        span.green boolean
        span ;
      p.code-desc
        | Automatically align the slider after scrolling or resizing if set to true

      code.inline
        span.blue noScrollClass
        span ? : 
        span.green string
        span ;
      p.code-desc
        | A class that the slider will get as soon as the slider is no longer scrollable (due to lack of slides)

      code.inline
        span.blue mouseDragCallback
        span ? : 
        span.green Function
        span (
        span.blue this
        span : 
        span.green Scroller
        span , 
        span.blue offset
        span : 
        span.green number
        span )
      p.code-desc
        | This function will be called whenever the slider is dragged. It passes the slider and the offset of the current drag

      h2 Methods 
      p
        | You can use the following methods to customize your Scroller

      br

      code.inline
        span.blue isScrollable()
        span  : 
        span.green boolean
      p.code-desc
        | Will return true if the slider contains enough 
        | slides so scrolling can take place. False otherwise.

      code.inline
        span.blue gotoRight()
        span  : 
        span.green void
      p.code-desc
        | Advances the slider one slide to the right. If the end is reached 
        | the slider will jump to the beginning.

      code.inline
        span.blue gotoLeft()
        span  : 
        span.green void
      p.code-desc
        | Advances the slider one slide to the left. If the beginning is reached 
        | the slider will jump to the end.

      code.inline 
        span.blue align(instant
        span ?: 
        span.green boolean
        span.blue )
        span  : 
        span.green void
      p.code-desc
        | Will align the slider to the nearest slide. If instant is set to true, the
        | slider will align without using a smooth animation.

      code.inline
        span.blue getElementPerPageAmount()
        span  : 
        span.green number
      p.code-desc
        | Will return the number of elements that are visible per slide

      code.inline 
        span.blue gotoElement(el
        span : 
        span.green HTMLElement
        span  | 
        span.green number
        span , 
        span.blue instant
        span ?: 
        span.green boolean
        span.blue )
        span  : 
        span.green void
      p.code-desc
        | Jump to the given element, it can either be a HTMLElement or the index of the
        | slide. If instant is set to true, there will be no animation.

      code.inline 
        span.blue checkIfEndStartReached() 
        span : { 
        span.blue isAtStart
        span : 
        span.green boolean; 
        span.blue isAtEnd
        span : 
        span.green boolean 
        span }
      p.code-desc
        | Returns an object with two booleans that state if the end or the start 
        | of the slider is reached

      code.inline 
        span.blue getClosestElement() 
        span : { 
        span.blue index
        span : 
        span.green number; 
        span.blue el
        span : 
        span.green HTMLElement 
        span }
      p.code-desc
        | Returns an object containing the index of the closest Element and
        | the HTMLElement

      code.inline 
        span.blue resetAutoplay()
        span  : 
        span.green number
      p.code-desc
        | Will stop the autoplay interval and restart it.

      h2 Default Slider
      .container 
        .button.prev &lt; 
        .button.next &gt;
        section.slider#slider 
          - var n = 0;
          while n < 10
            .slide
              a(href="https://wog.ch")= n++

      h2 Cutoff Element
      .container
        .button.prev &lt; 
        .button.next &gt;
        section.slider.slider--partial#slider2
          - var n = 0;
          while n < 10
            .slide
              a(href="https://wog.ch")= n++

      h2 Single Slides
      .container
        .button.prev &lt; 
        .button.next &gt;
        section.slider.slider--single#slider2
          - var n = 0;
          while n < 10
            .slide
              a(href="https://wog.ch")= n++
          .slide
            img(src="https://placekitten.com/400/300" alt="Kitten")

      h2 Autoplay
      .container
        .button.prev &lt; 
        .button.next &gt;
        section.slider.slider--partial.slider--autoplay#slider2
          - var n = 0;
          while n < 10
            .slide
              a(href="https://wog.ch")= n++

      h2 Snap into place
      .container
        .button.prev &lt; 
        .button.next &gt;
        section.slider2.slider--single
          - var n = 0;
          while n < 10
            .slide
              a(href="https://wog.ch")= n++
          .slide
            img(src="https://placekitten.com/400/300" alt="Kitten")

    footer 
      a(target="_blank" href="https://github.com/Juggern4ut/scrollbar_slider") Vertical Slider on Github
      a(target="_blank" href="https://github.com/Juggern4ut") Author
