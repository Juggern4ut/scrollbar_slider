/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/smoothscroll-polyfill/dist/smoothscroll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/smoothscroll-polyfill/dist/smoothscroll.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */\n(function () {\n  'use strict';\n\n  // polyfill\n  function polyfill() {\n    // aliases\n    var w = window;\n    var d = document;\n\n    // return if scroll behavior is supported and polyfill is not forced\n    if (\n      'scrollBehavior' in d.documentElement.style &&\n      w.__forceSmoothScrollPolyfill__ !== true\n    ) {\n      return;\n    }\n\n    // globals\n    var Element = w.HTMLElement || w.Element;\n    var SCROLL_TIME = 468;\n\n    // object gathering original scroll methods\n    var original = {\n      scroll: w.scroll || w.scrollTo,\n      scrollBy: w.scrollBy,\n      elementScroll: Element.prototype.scroll || scrollElement,\n      scrollIntoView: Element.prototype.scrollIntoView\n    };\n\n    // define timing method\n    var now =\n      w.performance && w.performance.now\n        ? w.performance.now.bind(w.performance)\n        : Date.now;\n\n    /**\n     * indicates if a the current browser is made by Microsoft\n     * @method isMicrosoftBrowser\n     * @param {String} userAgent\n     * @returns {Boolean}\n     */\n    function isMicrosoftBrowser(userAgent) {\n      var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];\n\n      return new RegExp(userAgentPatterns.join('|')).test(userAgent);\n    }\n\n    /*\n     * IE has rounding bug rounding down clientHeight and clientWidth and\n     * rounding up scrollHeight and scrollWidth causing false positives\n     * on hasScrollableSpace\n     */\n    var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;\n\n    /**\n     * changes scroll position inside an element\n     * @method scrollElement\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {undefined}\n     */\n    function scrollElement(x, y) {\n      this.scrollLeft = x;\n      this.scrollTop = y;\n    }\n\n    /**\n     * returns result of applying ease math function to a number\n     * @method ease\n     * @param {Number} k\n     * @returns {Number}\n     */\n    function ease(k) {\n      return 0.5 * (1 - Math.cos(Math.PI * k));\n    }\n\n    /**\n     * indicates if a smooth behavior should be applied\n     * @method shouldBailOut\n     * @param {Number|Object} firstArg\n     * @returns {Boolean}\n     */\n    function shouldBailOut(firstArg) {\n      if (\n        firstArg === null ||\n        typeof firstArg !== 'object' ||\n        firstArg.behavior === undefined ||\n        firstArg.behavior === 'auto' ||\n        firstArg.behavior === 'instant'\n      ) {\n        // first argument is not an object/null\n        // or behavior is auto, instant or undefined\n        return true;\n      }\n\n      if (typeof firstArg === 'object' && firstArg.behavior === 'smooth') {\n        // first argument is an object and behavior is smooth\n        return false;\n      }\n\n      // throw error when behavior is not supported\n      throw new TypeError(\n        'behavior member of ScrollOptions ' +\n          firstArg.behavior +\n          ' is not a valid value for enumeration ScrollBehavior.'\n      );\n    }\n\n    /**\n     * indicates if an element has scrollable space in the provided axis\n     * @method hasScrollableSpace\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */\n    function hasScrollableSpace(el, axis) {\n      if (axis === 'Y') {\n        return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;\n      }\n\n      if (axis === 'X') {\n        return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;\n      }\n    }\n\n    /**\n     * indicates if an element has a scrollable overflow property in the axis\n     * @method canOverflow\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */\n    function canOverflow(el, axis) {\n      var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];\n\n      return overflowValue === 'auto' || overflowValue === 'scroll';\n    }\n\n    /**\n     * indicates if an element can be scrolled in either axis\n     * @method isScrollable\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */\n    function isScrollable(el) {\n      var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');\n      var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');\n\n      return isScrollableY || isScrollableX;\n    }\n\n    /**\n     * finds scrollable parent of an element\n     * @method findScrollableParent\n     * @param {Node} el\n     * @returns {Node} el\n     */\n    function findScrollableParent(el) {\n      while (el !== d.body && isScrollable(el) === false) {\n        el = el.parentNode || el.host;\n      }\n\n      return el;\n    }\n\n    /**\n     * self invoked function that, given a context, steps through scrolling\n     * @method step\n     * @param {Object} context\n     * @returns {undefined}\n     */\n    function step(context) {\n      var time = now();\n      var value;\n      var currentX;\n      var currentY;\n      var elapsed = (time - context.startTime) / SCROLL_TIME;\n\n      // avoid elapsed times higher than one\n      elapsed = elapsed > 1 ? 1 : elapsed;\n\n      // apply easing to elapsed time\n      value = ease(elapsed);\n\n      currentX = context.startX + (context.x - context.startX) * value;\n      currentY = context.startY + (context.y - context.startY) * value;\n\n      context.method.call(context.scrollable, currentX, currentY);\n\n      // scroll more if we have not reached our destination\n      if (currentX !== context.x || currentY !== context.y) {\n        w.requestAnimationFrame(step.bind(w, context));\n      }\n    }\n\n    /**\n     * scrolls window or element with a smooth behavior\n     * @method smoothScroll\n     * @param {Object|Node} el\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {undefined}\n     */\n    function smoothScroll(el, x, y) {\n      var scrollable;\n      var startX;\n      var startY;\n      var method;\n      var startTime = now();\n\n      // define scroll context\n      if (el === d.body) {\n        scrollable = w;\n        startX = w.scrollX || w.pageXOffset;\n        startY = w.scrollY || w.pageYOffset;\n        method = original.scroll;\n      } else {\n        scrollable = el;\n        startX = el.scrollLeft;\n        startY = el.scrollTop;\n        method = scrollElement;\n      }\n\n      // scroll looping over a frame\n      step({\n        scrollable: scrollable,\n        method: method,\n        startTime: startTime,\n        startX: startX,\n        startY: startY,\n        x: x,\n        y: y\n      });\n    }\n\n    // ORIGINAL METHODS OVERRIDES\n    // w.scroll and w.scrollTo\n    w.scroll = w.scrollTo = function() {\n      // avoid action when no arguments are passed\n      if (arguments[0] === undefined) {\n        return;\n      }\n\n      // avoid smooth behavior if not required\n      if (shouldBailOut(arguments[0]) === true) {\n        original.scroll.call(\n          w,\n          arguments[0].left !== undefined\n            ? arguments[0].left\n            : typeof arguments[0] !== 'object'\n              ? arguments[0]\n              : w.scrollX || w.pageXOffset,\n          // use top prop, second argument if present or fallback to scrollY\n          arguments[0].top !== undefined\n            ? arguments[0].top\n            : arguments[1] !== undefined\n              ? arguments[1]\n              : w.scrollY || w.pageYOffset\n        );\n\n        return;\n      }\n\n      // LET THE SMOOTHNESS BEGIN!\n      smoothScroll.call(\n        w,\n        d.body,\n        arguments[0].left !== undefined\n          ? ~~arguments[0].left\n          : w.scrollX || w.pageXOffset,\n        arguments[0].top !== undefined\n          ? ~~arguments[0].top\n          : w.scrollY || w.pageYOffset\n      );\n    };\n\n    // w.scrollBy\n    w.scrollBy = function() {\n      // avoid action when no arguments are passed\n      if (arguments[0] === undefined) {\n        return;\n      }\n\n      // avoid smooth behavior if not required\n      if (shouldBailOut(arguments[0])) {\n        original.scrollBy.call(\n          w,\n          arguments[0].left !== undefined\n            ? arguments[0].left\n            : typeof arguments[0] !== 'object' ? arguments[0] : 0,\n          arguments[0].top !== undefined\n            ? arguments[0].top\n            : arguments[1] !== undefined ? arguments[1] : 0\n        );\n\n        return;\n      }\n\n      // LET THE SMOOTHNESS BEGIN!\n      smoothScroll.call(\n        w,\n        d.body,\n        ~~arguments[0].left + (w.scrollX || w.pageXOffset),\n        ~~arguments[0].top + (w.scrollY || w.pageYOffset)\n      );\n    };\n\n    // Element.prototype.scroll and Element.prototype.scrollTo\n    Element.prototype.scroll = Element.prototype.scrollTo = function() {\n      // avoid action when no arguments are passed\n      if (arguments[0] === undefined) {\n        return;\n      }\n\n      // avoid smooth behavior if not required\n      if (shouldBailOut(arguments[0]) === true) {\n        // if one number is passed, throw error to match Firefox implementation\n        if (typeof arguments[0] === 'number' && arguments[1] === undefined) {\n          throw new SyntaxError('Value could not be converted');\n        }\n\n        original.elementScroll.call(\n          this,\n          // use left prop, first number argument or fallback to scrollLeft\n          arguments[0].left !== undefined\n            ? ~~arguments[0].left\n            : typeof arguments[0] !== 'object' ? ~~arguments[0] : this.scrollLeft,\n          // use top prop, second argument or fallback to scrollTop\n          arguments[0].top !== undefined\n            ? ~~arguments[0].top\n            : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop\n        );\n\n        return;\n      }\n\n      var left = arguments[0].left;\n      var top = arguments[0].top;\n\n      // LET THE SMOOTHNESS BEGIN!\n      smoothScroll.call(\n        this,\n        this,\n        typeof left === 'undefined' ? this.scrollLeft : ~~left,\n        typeof top === 'undefined' ? this.scrollTop : ~~top\n      );\n    };\n\n    // Element.prototype.scrollBy\n    Element.prototype.scrollBy = function() {\n      // avoid action when no arguments are passed\n      if (arguments[0] === undefined) {\n        return;\n      }\n\n      // avoid smooth behavior if not required\n      if (shouldBailOut(arguments[0]) === true) {\n        original.elementScroll.call(\n          this,\n          arguments[0].left !== undefined\n            ? ~~arguments[0].left + this.scrollLeft\n            : ~~arguments[0] + this.scrollLeft,\n          arguments[0].top !== undefined\n            ? ~~arguments[0].top + this.scrollTop\n            : ~~arguments[1] + this.scrollTop\n        );\n\n        return;\n      }\n\n      this.scroll({\n        left: ~~arguments[0].left + this.scrollLeft,\n        top: ~~arguments[0].top + this.scrollTop,\n        behavior: arguments[0].behavior\n      });\n    };\n\n    // Element.prototype.scrollIntoView\n    Element.prototype.scrollIntoView = function() {\n      // avoid smooth behavior if not required\n      if (shouldBailOut(arguments[0]) === true) {\n        original.scrollIntoView.call(\n          this,\n          arguments[0] === undefined ? true : arguments[0]\n        );\n\n        return;\n      }\n\n      // LET THE SMOOTHNESS BEGIN!\n      var scrollableParent = findScrollableParent(this);\n      var parentRects = scrollableParent.getBoundingClientRect();\n      var clientRects = this.getBoundingClientRect();\n\n      if (scrollableParent !== d.body) {\n        // reveal element inside parent\n        smoothScroll.call(\n          this,\n          scrollableParent,\n          scrollableParent.scrollLeft + clientRects.left - parentRects.left,\n          scrollableParent.scrollTop + clientRects.top - parentRects.top\n        );\n\n        // reveal parent in viewport unless is fixed\n        if (w.getComputedStyle(scrollableParent).position !== 'fixed') {\n          w.scrollBy({\n            left: parentRects.left,\n            top: parentRects.top,\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // reveal element in viewport\n        w.scrollBy({\n          left: clientRects.left,\n          top: clientRects.top,\n          behavior: 'smooth'\n        });\n      }\n    };\n  }\n\n  if (true) {\n    // commonjs\n    module.exports = { polyfill: polyfill };\n  } else {}\n\n}());\n\n\n//# sourceURL=webpack://scrollbar_slider/./node_modules/smoothscroll-polyfill/dist/smoothscroll.js?");

/***/ }),

/***/ "./src/js/Scroller.js":
/*!****************************!*\
  !*** ./src/js/Scroller.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar Scroller = /** @class */ (function () {\r\n    /**\r\n     * Will create a new horizontal slider on the given selector using\r\n     * the options passed to the constructor\r\n     * @param sel The selector to find the container of the slider\r\n     * @param options The options used to build the slider (optional)\r\n     */\r\n    function Scroller(sel, options) {\r\n        var _this = this;\r\n        /** The interval responsible for autoplay */\r\n        this.autoplayInterval = 0;\r\n        /** The amount of milliseconds between autoplaying slides */\r\n        this.autoplayDuration = 0;\r\n        if (typeof sel === \"string\")\r\n            this.container = document.querySelector(sel);\r\n        else\r\n            this.container = sel;\r\n        if ((options === null || options === void 0 ? void 0 : options.desktopClass) && window.ontouchstart === undefined) {\r\n            this.container.classList.add(options.desktopClass);\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.nextPageHandler) {\r\n            options.nextPageHandler.addEventListener(\"click\", function () { return _this.gotoRight(); });\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.prevPageHandler) {\r\n            options.prevPageHandler.addEventListener(\"click\", function () { return _this.gotoLeft(); });\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.autoplay) && (options === null || options === void 0 ? void 0 : options.autoplay) > 0) {\r\n            this.autoplayDuration = options.autoplay;\r\n            this.initAutoplay();\r\n            this.container.addEventListener(\"mousedown\", function () { return _this.clearAutoplay(); });\r\n            this.container.addEventListener(\"touchstart\", function () { return _this.clearAutoplay(); });\r\n            document.addEventListener(\"mouseup\", function () { return _this.initAutoplay(); });\r\n            document.addEventListener(\"touchend\", function () { return _this.initAutoplay(); });\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.mouseScrolling) {\r\n            this.initializeMouseScrolling();\r\n        }\r\n    }\r\n    /**\r\n     * Scroll to the previous page, if the current\r\n     * position is at the end scroll to the first page\r\n     */\r\n    Scroller.prototype.gotoRight = function () {\r\n        var isAtEnd = this.checkIfEndStartReached().isAtEnd;\r\n        if (isAtEnd)\r\n            return this.gotoElement(0);\r\n        var closest = this.getClosestElement().index;\r\n        var elementsPP = this.getElementPerPageAmount();\r\n        var currentPage = Math.floor(closest / elementsPP) * elementsPP;\r\n        if (currentPage + elementsPP >= this.container.children.length) {\r\n            return this.gotoElement(0);\r\n        }\r\n        return this.gotoElement(currentPage + elementsPP);\r\n    };\r\n    /**\r\n     * Scroll to the previous page, if the current\r\n     * position is 0 scroll to the last page\r\n     */\r\n    Scroller.prototype.gotoLeft = function () {\r\n        var isAtStart = this.checkIfEndStartReached().isAtStart;\r\n        if (isAtStart)\r\n            return this.gotoElement(this.container.children.length - 1);\r\n        var closest = this.getClosestElement().index;\r\n        var elementsPP = this.getElementPerPageAmount();\r\n        var currentPage = Math.ceil(closest / elementsPP) * elementsPP;\r\n        if (currentPage - elementsPP < 0) {\r\n            return this.gotoElement(this.container.children.length - 1);\r\n        }\r\n        return this.gotoElement(currentPage - elementsPP);\r\n    };\r\n    /**\r\n     * If called, allows the user to scroll the slider on desktop\r\n     * by clicking and dragging with the mouse\r\n     */\r\n    Scroller.prototype.initializeMouseScrolling = function () {\r\n        var _this = this;\r\n        /** Ignore on touch devices */\r\n        if (window.ontouchstart !== undefined)\r\n            return;\r\n        var clickPosX;\r\n        var dragging = false;\r\n        /** Prevent selection on container due to unwanted effects */\r\n        this.container.style.userSelect = \"none\";\r\n        this.container.addEventListener(\"mousedown\", function (e) {\r\n            clickPosX = e.clientX;\r\n            dragging = true;\r\n        });\r\n        document.addEventListener(\"mousemove\", function (e) {\r\n            if (!dragging)\r\n                return;\r\n            var delta = clickPosX - e.clientX;\r\n            _this.container.style.scrollBehavior = \"auto\";\r\n            _this.container.scrollBy({ left: delta, behavior: \"auto\" });\r\n            clickPosX = e.clientX;\r\n        });\r\n        document.addEventListener(\"mouseup\", function (e) {\r\n            dragging = false;\r\n        });\r\n    };\r\n    /**\r\n     * Will calculate the amount of elements that can be shown in the\r\n     * scroller simoutaniusly\r\n     * @returns The number of elements that completely fit into a slide\r\n     */\r\n    Scroller.prototype.getElementPerPageAmount = function () {\r\n        var firstElement = this.container.children[0];\r\n        var style = window.getComputedStyle(firstElement);\r\n        var margins = parseInt(style.marginLeft) + parseInt(style.marginRight);\r\n        var totalSlideWidth = firstElement.offsetWidth + margins;\r\n        return Math.floor(this.container.offsetWidth / totalSlideWidth);\r\n    };\r\n    /**\r\n     * Will advance the slider to a given element or index\r\n     * @param el The element (or index) to advance to\r\n     */\r\n    Scroller.prototype.gotoElement = function (el) {\r\n        if (typeof el === \"number\") {\r\n            el = this.container.children[el];\r\n        }\r\n        if (!el)\r\n            return;\r\n        var style = window.getComputedStyle(el);\r\n        this.container.scroll({\r\n            top: 0,\r\n            left: el.offsetLeft - parseFloat(style.marginLeft),\r\n            behavior: \"smooth\",\r\n        });\r\n    };\r\n    /**\r\n     * Will check if the slideshow currently is at the very end\r\n     * or beginning and return an object containing two booleans\r\n     * @returns An object containing two booleans indicating weather the start or end of the slideshow has been reached\r\n     */\r\n    Scroller.prototype.checkIfEndStartReached = function () {\r\n        var scrollLeft = this.container.scrollLeft;\r\n        var offsetWidth = this.container.offsetWidth;\r\n        var scrollWidth = this.container.scrollWidth;\r\n        return {\r\n            isAtStart: scrollLeft === 0,\r\n            isAtEnd: scrollLeft + offsetWidth >= scrollWidth,\r\n        };\r\n    };\r\n    /**\r\n     * Will return the index of the slide that is currently\r\n     * the closest to the left border of the Slideshow\r\n     * @returns The index of calculated slide\r\n     */\r\n    Scroller.prototype.getClosestElement = function () {\r\n        var scrollLeft = this.container.scrollLeft;\r\n        var children = this.container.children;\r\n        var delta = Number.MAX_SAFE_INTEGER;\r\n        var closestSlide = 0;\r\n        for (var i = 0; i < children.length; i++) {\r\n            var child = this.container.children[i];\r\n            var tmpDelta = Math.abs(scrollLeft - child.offsetLeft);\r\n            if (tmpDelta < delta) {\r\n                delta = tmpDelta;\r\n                closestSlide = i;\r\n            }\r\n        }\r\n        return {\r\n            index: closestSlide,\r\n            el: this.container.children[closestSlide],\r\n        };\r\n    };\r\n    /**\r\n     * Initialize the autoplay interval\r\n     */\r\n    Scroller.prototype.initAutoplay = function () {\r\n        var _this = this;\r\n        if (this.autoplayInterval !== 0)\r\n            return;\r\n        this.autoplayInterval = window.setInterval(function () {\r\n            _this.gotoRight();\r\n        }, this.autoplayDuration);\r\n    };\r\n    /**\r\n     * Will stop the autoplay interval. This is used when the user\r\n     * is manually scrolling the slideshow to not interfere with the\r\n     * user input\r\n     */\r\n    Scroller.prototype.clearAutoplay = function () {\r\n        window.clearInterval(this.autoplayInterval);\r\n        this.autoplayInterval = 0;\r\n    };\r\n    return Scroller;\r\n}());\r\nexports[\"default\"] = Scroller;\r\n//# sourceMappingURL=Scroller.js.map\n\n//# sourceURL=webpack://scrollbar_slider/./src/js/Scroller.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar smoothscroll_polyfill_1 = __importDefault(__webpack_require__(/*! smoothscroll-polyfill */ \"./node_modules/smoothscroll-polyfill/dist/smoothscroll.js\"));\r\nvar Scroller_1 = __importDefault(__webpack_require__(/*! ./Scroller */ \"./src/js/Scroller.js\"));\r\nsmoothscroll_polyfill_1.default.polyfill();\r\nwindow.onload = function () {\r\n    var sliders = document.querySelectorAll(\".slider\");\r\n    window.scrollers = [];\r\n    sliders.forEach(function (s) {\r\n        var _a, _b;\r\n        var slider = s;\r\n        var prev = (_a = slider.parentElement) === null || _a === void 0 ? void 0 : _a.querySelector(\".prev\");\r\n        var next = (_b = slider.parentElement) === null || _b === void 0 ? void 0 : _b.querySelector(\".next\");\r\n        if (slider.classList.contains(\"slider--autoplay\")) {\r\n            window.scrollers.push(new Scroller_1.default(slider, {\r\n                desktopClass: \"hideScrollbar\",\r\n                prevPageHandler: prev,\r\n                nextPageHandler: next,\r\n                autoplay: 2000,\r\n            }));\r\n        }\r\n        else {\r\n            window.scrollers.push(new Scroller_1.default(slider, {\r\n                desktopClass: \"hideScrollbar\",\r\n                prevPageHandler: prev,\r\n                nextPageHandler: next,\r\n                mouseScrolling: true,\r\n            }));\r\n        }\r\n    });\r\n};\r\n//# sourceMappingURL=main.js.map\n\n//# sourceURL=webpack://scrollbar_slider/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;